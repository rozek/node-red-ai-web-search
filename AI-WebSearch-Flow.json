[
    {
        "id": "57c8d01a1208cef1",
        "type": "comment",
        "z": "17979232dade4e09",
        "name": "AI Web Search",
        "info": "",
        "x": 1420,
        "y": 100,
        "wires": []
    },
    {
        "id": "c41e14c8b79173b0",
        "type": "inject",
        "z": "17979232dade4e09",
        "name": "on StartUp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "FilePath",
                "v": "uibuilder/ai-web-search/src/index.html",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 160,
        "wires": [
            [
                "6586bf45dd57de2d"
            ]
        ]
    },
    {
        "id": "6586bf45dd57de2d",
        "type": "template",
        "z": "17979232dade4e09",
        "name": "index.html",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" charset=\"utf-8\" style=\"width:100%\">\n\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n  <meta name=\"viewport\" content=\"minimal-ui, width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n\n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n  <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n  <meta name=\"format-detection\" content=\"telephone=no\">\n\n  <style name=\"mobile-prologue\">\n    html {\n      text-size-adjust: 100%;\n      -moz-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n      -o-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n    }\n\n    html,\n    body {\n      width: 99%;\n      height: 99%;\n    }\n\n    html {\n      overflow: hidden scroll\n    }\n  </style>\n\n  <link rel=\"icon\" href=\"../uibuilder/images/node-blue.ico\">\n\n  <script type=\"importmap\">\n    {\n    \"imports\": {\n      \"javascript-interface-library\": \"https://rozek.github.io/node-red-uibilder-chatbot/js/javascript-interface-library.esm.js\",\n      \"JIL\":                          \"https://rozek.github.io/node-red-uibilder-chatbot/js/javascript-interface-library.esm.js\",\n\n      \"preact-with-htm\": \"https://rozek.github.io/node-red-uibilder-chatbot/js/preact-with-htm.esm.js\"\n    }\n  }\n  </script>\n\n  <style name=\"white-textured-background\">\n    html,\n    body {\n      background-color: white;\n      background-image: url(https://rozek.github.io/node-red-uibilder-chatbot/common/BinaryTexture_white.jpg);\n      background-repeat: repeat;\n\n      font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      color: #111111;\n      line-height: 150%;\n    }\n\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 300px;\n      mrgin: 0px;\n      padding: 0px;\n    }\n\n    * {\n      -moz-box-sizing: border-box;\n      -webkit-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    .ait-message-view {\n      display: flex;\n      position: relative;\n      flex-flow: column nowrap;\n      align-items: stretch;\n      flex: 1 1 auto;\n      overflow: scroll;\n    }\n\n    .ait-user-message-view {\n      display: block;\n      position: relative;\n      margin: 10px 10px 10px 30px;\n      border: solid 1px gray;\n      border-radius: 10px;\n      background: #DDDDDD;\n      box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.5);\n      padding: 10px;\n    }\n\n    .ait-action-message-view {\n      display: block;\n      position: relative;\n      width: 80%;\n      margin: 0px 20px 0px 20px;\n    }\n\n    .ait-action-aborted-icon {\n      display: inline-block;\n      position: relative;\n      width: 24px;\n      height: 24px;\n      top: 6px;\n      padding-right: 4px;\n      background: url(https://rozek.github.io/node-red-uibilder-chatbot/icons/bolt.svg);\n      background-size: contain;\n    }\n\n    .ait-action-running-icon {\n      display: inline-block;\n      position: relative;\n      width: 24px;\n      height: 24px;\n      top: 6px;\n      padding-right: 4px;\n      background: url(https://rozek.github.io/node-red-uibilder-chatbot/icons/hourglass.svg);\n      background-size: contain;\n    }\n\n    .ait-action-finished-icon {\n      display: inline-block;\n      position: relative;\n      width: 24px;\n      height: 24px;\n      top: 6px;\n      padding-right: 4px;\n      background: url(https://rozek.github.io/node-red-uibilder-chatbot/icons/circle-check.svg);\n      background-size: contain;\n    }\n\n    .ait-assistant-message-view {\n      display: block;\n      position: relative;\n      width: 80%;\n      margin: 10px 30px 10px 10px;\n      border: solid 1px gray;\n      border-radius: 10px;\n      background: #DDDDDD;\n      box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.5);\n      padding: 10px;\n    }\n  </style>\n\n\n  <script type=\"module\">\n    import { render, html, signal, Component } from 'preact-with-htm'\n\n  import '../uibuilder/uibuilder.esm.min.js'// adds `uibuilder` & `$` to globals\n\n// chat messages used herein\n// - hello     - welcomes the user\n// - user      - user input\n// - action    - informs about internal actions and their progress\n// - assistant - final result\n\n/**** reactive State ****/\n\n  const reactiveState = signal({\n    availableModels:[],\n    chosenModel:'',\n    MessageList:[\n      { role:'hello', content:'Hello, what do you look for?' },\n    ],\n    StatusMessage:'please enter your request',\n  })\n\n/**** handling of incoming messages ****/\n\n  uibuilder.onChange('msg', (msg) => {\n    console.log('incoming uibuilder msg',msg)\n    switch (msg.topic) {\n      case 'reload-web-page':\n        reloadPage()\n        break\n      case 'model-list':\n        reactiveState.value = { ...reactiveState.value, availableModels:msg.payload.slice() }\n        break\n      case 'status-message':\n        reactiveState.value = { ...reactiveState.value, StatusMessage:msg.payload }\n        break\n      case 'action-message':\n        setAction(msg.ActionId,msg.ActionProgress,msg.payload)\n        break\n      case 'chat-completion':\nconsole.log(msg.payload)\n        reactiveState.value.MessageList.push({\n          role:'assistant',content:(msg.payload || '').trim() || '(no response)'\n        })\n        reactiveState.value = { ...reactiveState.value }\n    }\n  })\n\n  function reloadPage () {\n    const newLocation = (\n      /^[?]([^&]+&)*_=\\d+(&|$)/.test(window.location.search || '')\n      ? window.location.href.replace(/_=\\d+/,'_=' + Date.now())\n      : window.location.href + '?_=' + Date.now()\n    )\n    window.location.href = newLocation\n  }\n\n  function setAction (ActionId, ActionProgress, Content) {\n    let MessageList = reactiveState.value.MessageList\n      let ActionIndex = -1\n      for (let i = 0, l = MessageList.length; i < l; i++) {\n        if ((MessageList[i].role === 'action') && (MessageList[i].id === ActionId)) {\n          ActionIndex = i; break\n        }\n      }\n    if (ActionIndex < 0) {\n      MessageList.push({\n        role:'action', id:ActionId,\n        progress:ActionProgress, content:Content\n      })\n    } else {\n      Object.assign(MessageList[ActionIndex],{\n        progress:ActionProgress, content:Content\n      })\n    }\n    reactiveState.value = { ...reactiveState.value }\n  }\n\n/**** UserMessageView ****/\n\n  class UserMessageView extends Component {\n    render (PropSet) {\n      let Content = PropSet.message.content\n      return html`<div class=\"ait-user-message-view\">${Content}</div>`\n    }\n  }\n\n/**** ActionMessageView ****/\n\n  class ActionMessageView extends Component {\n    render (PropSet) {\n      let Progress = PropSet.message.progress\n      let Content  = PropSet.message.content\n\n      let Icon\n      switch (true) {\n        case (Progress < 0): Icon = html`<div class=\"ait-action-aborted-icon\"/>`; break\n        case (Progress < 1): Icon = html`<div class=\"ait-action-running-icon\"/>`; break\n        default:             Icon = html`<div class=\"ait-action-finished-icon\"/>`; break\n      }\n\n      return html`<div class=\"ait-action-message-view\">\n        ${Icon} ${Content}\n      </div>`\n    }\n  }\n\n/**** AssistantMessageView ****/\n\n  class AssistantMessageView extends Component {\n    render (PropSet) {\n      let Content = PropSet.message.content\n      return html`<div class=\"ait-assistant-message-view\">${Content}</div>`\n    }\n  }\n\n/**** MessageView ****/\n\n  class MessageView extends Component {\n    render (PropSet) {\n      return html`<div class=\"ait-message-view\">\n        ${reactiveState.value.MessageList.map((Message) => {\n          switch (Message.role) {\n            case 'user':      return html`<${UserMessageView}      message=${Message}/>`\n            case 'action':    return html`<${ActionMessageView}    message=${Message}/>`\n            case 'hello':      // nasty trick to show an initial \"Hello\" message\n            case 'assistant': return html`<${AssistantMessageView} message=${Message}/>`\n          }\n        })}\n      </div>`\n    }\n  }\n\n/**** ArenaView ****/\n\n  class ArenaView extends Component {\n    state = { UserInput:'' }\n\n    render (PropSet) {\n      if ((this.state.Model === '') && (reactiveState.value.availableModels.length > 0)) {\n        this.state.Model = reactiveState.value.availableModels[0]\n      }\n\n      const onModelChange = (Event) => {\n        const Element     = Event.target\n        const chosenModel = Element.options[Element.selectedIndex].value\n        reactiveState.value = {\n          ...reactiveState.value, chosenModel,\n          StatusMessage:'thanks, now enter your request'\n        }\n      }\n\n      const onUserInput = (Event) => {\n        this.setState({ UserInput:Event.target.value })\n      }\n\n      const submit = (Event) => {\n        const { UserInput } = this.state\n\n        const MessageList = reactiveState.value.MessageList\n        MessageList.push({ role:'user',content:UserInput })\n        reactiveState.value = { ...reactiveState.value }\n\n        const outgoingMessage = {\n          'topic':  'search-the-web',\n          'payload':MessageList.filter(\n            (Message) => (Message.role !== 'action') && (Message.role !== 'hello')\n          ),\n          Model:reactiveState.value.chosenModel,\n          ContextLength:4096, PredictionLength:512,\n          topK:10, topP:0.95, Temperature:0\n        }\n\n        console.log('outgoing uibuilder msg',outgoingMessage)\n        uibuilder.send(outgoingMessage)\n      }\n\n      const readyForSubmit = (this.state.UserInput !== '')\n\n      return html`<div style=\"\n        display:flex; position:absolute; flex-flow:column nowrap; align-items:stretch;\n        left:0px; top:0px; right:0px; bottom:0px;\n      \">\n        <div style=\"flex:0 0 auto; font-size:22px\">AI Web Search</div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div style=\"flex:0 0 auto\">\n          This is just a simple example for the<span> </span>\n          <a href=\"https://github.com/rozek/node-red-ai-toolkit\">node-red-ai-toolkit</a>.<span> </span>\n          Please visit<span> </span>\n          <a href=\"https://github.com/rozek/node-red-ai-web-search\">node-red-ai-web-search</a><span> </span>\n          to learn how to install this application and run everything on your\n          own machine.\n        </div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div>\n          Model:\n          <select onChange=${onModelChange} style=\"margin-left:10px; min-width:120px\">\n            ${reactiveState.value.availableModels.map(\n              (Model) => html`<option\n                selected=${reactiveState.value.chosenModel === Model}\n              >${Model}</option>`\n            )}\n          </select>\n        </div>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <${MessageView}/>\n          <div style=\"flex:0 0 auto; height:10px\"/>\n        <div style=\"display:block; position:relative; flex:0 0 auto; height:30px\">\n          <span style=\"top:10px\">Your Input:</span>\n          <button disabled=${! readyForSubmit} style=\"\n             display:inline-block; position:absolute;\n             left:auto; top:-4px; right:0px;\n             width:100px; height:30px;\n           \"\n            onClick=${submit}\n          ><b>Submit</b></button>\n        </div>\n        <textarea onInput=${onUserInput} style=\"flex:0 0 auto; height:50px\"></textarea>\n        <div style=\"margin-top:10px\">${reactiveState.value.StatusMessage}</div>\n      </div>`\n    }\n  }\n\n  render(html`<${ArenaView}/>`,document.getElementById('Arena'))\n  console.log('page was loaded, URL = ' + window.location)\n\n  uibuilder.send({ 'topic':'list-models', 'payload':'' })\n  console.log('model-list was requested')\n  </script>\n</head>\n\n<body>\n\n  <div id=\"Arena\" style=\"\n    display:inline-block; position:relative;\n    width:600px; height:100%; min-height:300px;\n    margin:0px; padding:0px;\n  \"></div>\n</body>\n\n</html>",
        "output": "str",
        "x": 1610,
        "y": 160,
        "wires": [
            [
                "d2720daa734aa76c"
            ]
        ]
    },
    {
        "id": "d2720daa734aa76c",
        "type": "function",
        "z": "17979232dade4e09",
        "name": "for /ai-web-search",
        "func": "  let Contents = '' + (msg.payload || '')\n\n  let FilePath = ('' + (msg.FilePath || '')).trim()\n  if (FilePath === '') {\n    throw new Error('no file output path given')\n  }\n\n/**** write payload to file ****/\n\n  fs.writeFileSync(\n    path.join(process.env.HOME + '/.node-red',FilePath),Contents\n  )\n\n  node.status({ fill:'green', shape:'dot', text:'file written' })\n\n  Object.assign(msg,{\n    topic:  'reload-web-page',\n    payload:'',\n  })\n\n  return msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "path",
                "module": "path"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 1810,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6c47fcac2db42db2",
        "type": "uibuilder",
        "z": "17979232dade4e09",
        "name": "",
        "topic": "",
        "url": "ai-web-search",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "esm-blank-client",
        "extTemplate": "",
        "showfolder": false,
        "oldUrl": "web-search",
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.6.0",
        "showMsgUib": true,
        "title": "",
        "descr": "",
        "x": 1650,
        "y": 220,
        "wires": [
            [
                "87fcf2b1784de4e6",
                "1ab312a85e50ea6d"
            ],
            []
        ]
    },
    {
        "id": "59b67029bd9205fa",
        "type": "inject",
        "z": "17979232dade4e09",
        "name": "manual Reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "reload-web-page",
        "payload": "(n/a)",
        "payloadType": "str",
        "x": 1440,
        "y": 220,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "4bf9da5de0cc5558",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "list_models",
        "target": "node-red-ai-toolkit:list_models",
        "outputs": 2,
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "abfc0d635fbb30d5"
            ],
            [
                "4fccc3e17d773a7d"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "abfc0d635fbb30d5",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "send model-list",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "model-list",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1800,
        "y": 280,
        "wires": [
            [
                "5788121828785b7c",
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "87fcf2b1784de4e6",
        "type": "switch",
        "z": "17979232dade4e09",
        "name": "list-models",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "list-models",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "4bf9da5de0cc5558",
                "2e9d81bed2422828"
            ]
        ]
    },
    {
        "id": "1ab312a85e50ea6d",
        "type": "switch",
        "z": "17979232dade4e09",
        "name": "search-the-web",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "search-the-web",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 400,
        "wires": [
            [
                "a37d0a4e45e0a93c",
                "b67c37172fc99c1b"
            ]
        ]
    },
    {
        "id": "4fccc3e17d773a7d",
        "type": "debug",
        "z": "17979232dade4e09",
        "name": "internal error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 880,
        "wires": []
    },
    {
        "id": "b1f32c2b6dee443e",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "send response",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "chat-completion",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 820,
        "wires": [
            [
                "11f200edad4588bd",
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "2e9d81bed2422828",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"looking for models\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "looking for models",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 340,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "5788121828785b7c",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"models loaded\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "models loaded",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1810,
        "y": 340,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "a37d0a4e45e0a93c",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"computing response\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "computing response",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 460,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "11f200edad4588bd",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "\"finished\"",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "finished",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 820,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "b5c259110d6b5060",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "search_prompt_from_text",
        "target": "node-red-ai-toolkit:search_prompt_from_text",
        "outputs": 2,
        "x": 1710,
        "y": 520,
        "wires": [
            [
                "e1815313a5b7551e",
                "896eed1aa87d4824"
            ],
            [
                "4fccc3e17d773a7d"
            ]
        ]
    },
    {
        "id": "e1815313a5b7551e",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "report search prompt",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "action-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ActionId",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "ActionProgress",
                "pt": "msg",
                "to": "1.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"searching for \" & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1800,
        "y": 460,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "896eed1aa87d4824",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "results_of_search",
        "target": "node-red-ai-toolkit:results_of_search",
        "outputs": 2,
        "x": 1490,
        "y": 580,
        "wires": [
            [
                "e918f0fabd72d9b4"
            ],
            [
                "4fccc3e17d773a7d"
            ]
        ]
    },
    {
        "id": "4f0c3b9e754aaa1d",
        "type": "loop",
        "z": "17979232dade4e09",
        "name": "for each URL",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "msg.URLList.length > 0",
        "conditionType": "js",
        "when": "before",
        "enumeration": "URLList",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 1490,
        "y": 640,
        "wires": [
            [
                "b1f32c2b6dee443e"
            ],
            [
                "1b169a4bbd1548fa",
                "8792bcae0f0f2715"
            ]
        ]
    },
    {
        "id": "8792bcae0f0f2715",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "text_at_url",
        "target": "node-red-ai-toolkit:text_at_url",
        "outputs": 2,
        "x": 1510,
        "y": 700,
        "wires": [
            [
                "26052696fbb524d4"
            ],
            [
                "4f0c3b9e754aaa1d",
                "4fccc3e17d773a7d"
            ]
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "1b169a4bbd1548fa",
        "type": "change",
        "z": "17979232dade4e09",
        "name": "report URL",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "action-message",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ActionId",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "ActionProgress",
                "pt": "msg",
                "to": "1.0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"scanning \" & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 640,
        "wires": [
            [
                "6c47fcac2db42db2"
            ]
        ]
    },
    {
        "id": "26052696fbb524d4",
        "type": "reusable",
        "z": "17979232dade4e09",
        "name": "validated_extract_from_text",
        "target": "node-red-ai-toolkit:validated_extract_from_text",
        "outputs": 2,
        "x": 1560,
        "y": 760,
        "wires": [
            [
                "7b707fc2881e06da"
            ],
            [
                "4fccc3e17d773a7d",
                "4f0c3b9e754aaa1d"
            ]
        ]
    },
    {
        "id": "7b707fc2881e06da",
        "type": "function",
        "z": "17979232dade4e09",
        "name": "finish upon success",
        "func": "if (msg.payload !== '') {\n    msg.command = 'break'\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 760,
        "wires": [
            [
                "4f0c3b9e754aaa1d"
            ]
        ]
    },
    {
        "id": "b67c37172fc99c1b",
        "type": "function",
        "z": "17979232dade4e09",
        "name": "isolate request",
        "func": "let MessageList = msg.payload.filter((Message) => (Message.role === 'user'))\n\nlet Request = MessageList[MessageList.length - 1].content || ''\nif (Request.trim() !== '') {\n    msg.payload = msg.Request = Request\n    return [msg, null]\n} else {\n    msg.payload = 'no request found'\n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 520,
        "wires": [
            [
                "b5c259110d6b5060"
            ],
            [
                "4fccc3e17d773a7d"
            ]
        ]
    },
    {
        "id": "e918f0fabd72d9b4",
        "type": "function",
        "z": "17979232dade4e09",
        "name": "isolate URLs",
        "func": "msg.URLList = msg.payload\n  .map((SearchResult) => SearchResult.URL)\n  .filter((URL) => (URL != null) && (URL.trim() !== ''))\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 580,
        "wires": [
            [
                "4f0c3b9e754aaa1d"
            ]
        ]
    }
]